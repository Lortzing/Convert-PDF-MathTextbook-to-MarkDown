"""Command line entry points for the ctt2md toolkit."""

from __future__ import annotations

import argparse
import os
from pathlib import Path
from typing import Sequence

from .converter import ConversionConfig, PDFToMarkdownConverter


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="Convert math PDF textbooks to Markdown using Qwen 3 VL.")
    parser.add_argument("pdf", nargs="+", help="Path(s) to PDF files to convert.")
    parser.add_argument("--output", "-o", help="Output directory or Markdown file, depending on number of PDFs.")
    parser.add_argument("--model", default=None, help="Override the Qwen model identifier.")
    parser.add_argument("--dpi", type=int, default=None, help="Rendering resolution when rasterising PDF pages.")
    parser.add_argument(
        "--max-output-tokens",
        type=int,
        default=None,
        help="Limit the number of tokens generated by the model.",
    )
    parser.add_argument(
        "--extra-instruction",
        action="append",
        default=None,
        help="Additional prompt instructions. Repeatable.",
    )
    return parser


def resolve_output_argument(output_arg: str | None, pdfs: Sequence[str]) -> Path | None:
    if output_arg is None:
        return None
    output_path = Path(output_arg)
    if len(pdfs) == 1:
        return output_path
    output_path.mkdir(parents=True, exist_ok=True)
    return output_path


def main(argv: Sequence[str] | None = None) -> None:
    parser = build_parser()
    args = parser.parse_args(argv)

    if not os.getenv("OPENAI_API_KEY"):
        parser.error("OPENAI_API_KEY must be set in the environment before running the converter.")

    extra_instructions = tuple(args.extra_instruction or [])
    defaults = ConversionConfig()
    config = ConversionConfig(
        model=args.model or defaults.model,
        dpi=args.dpi or defaults.dpi,
        extra_instructions=extra_instructions,
    )
    converter = PDFToMarkdownConverter(config=config)

    output_path = resolve_output_argument(args.output, args.pdf)
    if len(args.pdf) == 1:
        converter.convert(args.pdf[0], output_path=output_path)
    else:
        output_dir = output_path or Path.cwd() / "markdown"
        converter.convert_many(args.pdf, output_dir=output_dir)


if __name__ == "__main__":  # pragma: no cover
    main()
